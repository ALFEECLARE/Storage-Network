buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

import net.minecraftforge.gradle.common.task.SignJar
import groovy.json.JsonSlurper
import groovy.json.JsonOutput

version = "${mc_version}-${mod_version}"
group = 'com.lothrazar.storagenetwork' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'SimpleStorageNetwork'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

minecraft {
    mappings channel: 'snapshot', version: mappings_version

    //makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    
    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    
    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
		         properties 'mixin.env.disableRefMap': 'true'
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                storagenetwork {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                storagenetwork {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'storagenetwork', '--all', '--output', file('src/generated/resources/')

            mods {
                storagenetwork {
                    source sourceSets.main
                }
            }
        }
    }
}

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
   minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"

    compile fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}")
  
  
  // only for testing
  
//    compileOnly "appeng:appliedenergistics2:8.1.0:api"
 //   fg.deobf "appeng:appliedenergistics2:8.1.0:api"
 //   runtime "appeng:appliedenergistics2:8.1.0:api"
 
// compileOnly fg.deobf("appeng:appliedenergistics2:8.1.0")
// runtimeOnly fg.deobf("appeng:appliedenergistics2:8.1.0")
    
    
    compileOnly fg.deobf("com.refinedmods:refinedstorage:1.9.6+80")
    runtimeOnly fg.deobf("com.refinedmods:refinedstorage:1.9.6+80")
  //dead in the water
  //  fg.deobf "com.jaquadro.minecraft.storagedrawers:StorageDrawers:1.16.3-8.2.1:api"
  //  runtime "com.jaquadro.minecraft.storagedrawers:StorageDrawers:1.16.3-8.2.1"
    

}
repositories {
  maven {
    url = "https://repo.refinedmods.com/"
  }
  maven {
    // location of the maven that hosts JEI files
    name = "Progwml6 maven"
    url = "https://dvs1.progwml6.com/files/maven/"
  }
  maven {
    // location of a maven mirror for JEI files, as a fallback
    name = "ModMaven"
    url = "https://modmaven.k-4u.nl"
  }
     maven {
        name = "storagedrawers"
        url = "https://dl.bintray.com/jaquadro/dev/"
    }
     
    maven {
        name "Modmaven"
        url "https://modmaven.dev/"
        // For Gradle 5.1 and above, limit it to just AE2
    //    content {
    //        includeGroup 'appeng'
    //    }
    }
}
// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
            "Specification-Title": "storagenetwork",
            "Specification-Vendor": "storagenetworksareus",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"storagenetworksareus",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar') 
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}

task signJar(type: SignJar, dependsOn: jar) {

    // findProperty allows us to reference the property without it existing. 
    // Using project.propName would cause the script to fail validation if 
    // the property did not exist. 
    keyStore = project.findProperty('keyStore')
    alias = project.findProperty('keyStoreAlias')
    storePass = project.findProperty('keyStorePass')
    keyPass = project.findProperty('keyStoreKeyPass')
    inputFile = jar.archivePath
    outputFile = jar.archivePath
}

build.dependsOn signJar

task copyJar(type: Copy) {
    from jar
    into "${dist_folder}"
}

build.finalizedBy copyJar

cleanJar {
  delete 'build/libs'
}
